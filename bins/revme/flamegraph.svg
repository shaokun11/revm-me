<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="717"><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="0.0000%" y="261" width="0.1395%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>revme`revm::db::states::cache::CacheState::new (1 samples, 0.14%)</title><rect x="0.1395%" y="261" width="0.1395%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3895%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.28%)</title><rect x="0.2789%" y="245" width="0.2789%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.5289%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="0.5579%" y="245" width="0.1395%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.8079%" y="255.50"></text></g><g><title>revme`&lt;revm::db::states::cache::CacheState as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="0.6974%" y="245" width="0.1395%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.9474%" y="255.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,revme::cmd::statetest::models::MultiTestUnit&gt;&gt; (1 samples, 0.14%)</title><rect x="0.8368%" y="245" width="0.1395%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="1.0868%" y="255.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revme::cmd::statetest::models::MultiTestUnit&gt; (1 samples, 0.14%)</title><rect x="0.8368%" y="229" width="0.1395%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="1.0868%" y="239.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revme::cmd::statetest::models::MultiTransactionParts&gt; (1 samples, 0.14%)</title><rect x="0.8368%" y="213" width="0.1395%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="1.0868%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="0.8368%" y="197" width="0.1395%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="1.0868%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::db::states::cache::CacheState&gt; (1 samples, 0.14%)</title><rect x="0.9763%" y="245" width="0.1395%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="1.2263%" y="255.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloy_primitives::bits::address::Address,revm::db::states::cache_account::CacheAccount)&gt;&gt; (1 samples, 0.14%)</title><rect x="0.9763%" y="229" width="0.1395%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="1.2263%" y="239.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm_primitives::bytecode::Bytecode&gt; (1 samples, 0.14%)</title><rect x="0.9763%" y="213" width="0.1395%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="1.2263%" y="223.50"></text></g><g><title>revme`revm::db::states::cache::CacheState::insert_account_with_storage (2 samples, 0.28%)</title><rect x="1.1158%" y="245" width="0.2789%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="2"/><text x="1.3658%" y="255.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.28%)</title><rect x="1.1158%" y="229" width="0.2789%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="2"/><text x="1.3658%" y="239.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.28%)</title><rect x="1.1158%" y="213" width="0.2789%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="2"/><text x="1.3658%" y="223.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="1.2552%" y="197" width="0.1395%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="1"/><text x="1.5052%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.28%)</title><rect x="1.3947%" y="229" width="0.2789%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="2"/><text x="1.6447%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.84%)</title><rect x="1.6736%" y="229" width="0.8368%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="6"/><text x="1.9236%" y="239.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="2.5105%" y="229" width="0.1395%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="2.7605%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="2.6499%" y="213" width="0.1395%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="2.8999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="2.7894%" y="213" width="0.1395%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="1"/><text x="3.0394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="2.7894%" y="197" width="0.1395%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="3.0394%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="2.7894%" y="181" width="0.1395%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="3.0394%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.14%)</title><rect x="2.9289%" y="197" width="0.1395%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="3.1789%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.14%)</title><rect x="2.9289%" y="181" width="0.1395%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="3.1789%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.14%)</title><rect x="2.9289%" y="165" width="0.1395%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="1"/><text x="3.1789%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.14%)</title><rect x="3.0683%" y="181" width="0.1395%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="3.3183%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.14%)</title><rect x="3.0683%" y="165" width="0.1395%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="3.3183%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.14%)</title><rect x="3.0683%" y="149" width="0.1395%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="3.3183%" y="159.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm_primitives::result::ResultAndState&gt;&gt; (5 samples, 0.70%)</title><rect x="2.6499%" y="229" width="0.6974%" height="15" fill="rgb(232,36,49)" fg:x="19" fg:w="5"/><text x="2.8999%" y="239.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (3 samples, 0.42%)</title><rect x="2.9289%" y="213" width="0.4184%" height="15" fill="rgb(209,103,24)" fg:x="21" fg:w="3"/><text x="3.1789%" y="223.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (2 samples, 0.28%)</title><rect x="3.0683%" y="197" width="0.2789%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="2"/><text x="3.3183%" y="207.50"></text></g><g><title>revme`bytes::bytes::shared_drop (1 samples, 0.14%)</title><rect x="3.2078%" y="181" width="0.1395%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="3.4578%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="3.2078%" y="165" width="0.1395%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="3.4578%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.14%)</title><rect x="4.6025%" y="213" width="0.1395%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="1"/><text x="4.8525%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (9 samples, 1.26%)</title><rect x="4.7420%" y="213" width="1.2552%" height="15" fill="rgb(233,36,39)" fg:x="34" fg:w="9"/><text x="4.9920%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="5.9972%" y="213" width="0.1395%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="1"/><text x="6.2472%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.14%)</title><rect x="6.1367%" y="213" width="0.1395%" height="15" fill="rgb(245,192,40)" fg:x="44" fg:w="1"/><text x="6.3867%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.28%)</title><rect x="7.2524%" y="181" width="0.2789%" height="15" fill="rgb(238,167,29)" fg:x="52" fg:w="2"/><text x="7.5024%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 1.39%)</title><rect x="6.2762%" y="213" width="1.3947%" height="15" fill="rgb(232,182,51)" fg:x="45" fg:w="10"/><text x="6.5262%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.98%)</title><rect x="6.6946%" y="197" width="0.9763%" height="15" fill="rgb(231,60,39)" fg:x="48" fg:w="7"/><text x="6.9446%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.14%)</title><rect x="7.5314%" y="181" width="0.1395%" height="15" fill="rgb(208,69,12)" fg:x="54" fg:w="1"/><text x="7.7814%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.14%)</title><rect x="7.5314%" y="165" width="0.1395%" height="15" fill="rgb(235,93,37)" fg:x="54" fg:w="1"/><text x="7.7814%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="7.6709%" y="213" width="0.1395%" height="15" fill="rgb(213,116,39)" fg:x="55" fg:w="1"/><text x="7.9209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="7.6709%" y="197" width="0.1395%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="1"/><text x="7.9209%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="7.6709%" y="181" width="0.1395%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="1"/><text x="7.9209%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.56%)</title><rect x="7.8103%" y="213" width="0.5579%" height="15" fill="rgb(218,138,4)" fg:x="56" fg:w="4"/><text x="8.0603%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.28%)</title><rect x="8.3682%" y="213" width="0.2789%" height="15" fill="rgb(250,191,14)" fg:x="60" fg:w="2"/><text x="8.6182%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (45 samples, 6.28%)</title><rect x="8.6471%" y="213" width="6.2762%" height="15" fill="rgb(239,60,40)" fg:x="62" fg:w="45"/><text x="8.8971%" y="223.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (42 samples, 5.86%)</title><rect x="9.0656%" y="197" width="5.8577%" height="15" fill="rgb(206,27,48)" fg:x="65" fg:w="42"/><text x="9.3156%" y="207.50">libsyst..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (42 samples, 5.86%)</title><rect x="9.0656%" y="181" width="5.8577%" height="15" fill="rgb(225,35,8)" fg:x="65" fg:w="42"/><text x="9.3156%" y="191.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.14%)</title><rect x="14.9233%" y="213" width="0.1395%" height="15" fill="rgb(250,213,24)" fg:x="107" fg:w="1"/><text x="15.1733%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.14%)</title><rect x="14.9233%" y="197" width="0.1395%" height="15" fill="rgb(247,123,22)" fg:x="107" fg:w="1"/><text x="15.1733%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_attr_setstacksize (1 samples, 0.14%)</title><rect x="15.0628%" y="213" width="0.1395%" height="15" fill="rgb(231,138,38)" fg:x="108" fg:w="1"/><text x="15.3128%" y="223.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="15.2022%" y="213" width="0.1395%" height="15" fill="rgb(231,145,46)" fg:x="109" fg:w="1"/><text x="15.4522%" y="223.50"></text></g><g><title>revme`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="15.3417%" y="213" width="0.1395%" height="15" fill="rgb(251,118,11)" fg:x="110" fg:w="1"/><text x="15.5917%" y="223.50"></text></g><g><title>revme`&lt;crossbeam_utils::sync::wait_group::WaitGroup as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="15.4812%" y="213" width="0.1395%" height="15" fill="rgb(217,147,25)" fg:x="111" fg:w="1"/><text x="15.7312%" y="223.50"></text></g><g><title>revme`std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (1 samples, 0.14%)</title><rect x="15.4812%" y="197" width="0.1395%" height="15" fill="rgb(247,81,37)" fg:x="111" fg:w="1"/><text x="15.7312%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_settype (1 samples, 0.14%)</title><rect x="15.4812%" y="181" width="0.1395%" height="15" fill="rgb(209,12,38)" fg:x="111" fg:w="1"/><text x="15.7312%" y="191.50"></text></g><g><title>revme`DYLD-STUB$$free (1 samples, 0.14%)</title><rect x="15.6206%" y="213" width="0.1395%" height="15" fill="rgb(227,1,9)" fg:x="112" fg:w="1"/><text x="15.8706%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="15.7601%" y="197" width="0.1395%" height="15" fill="rgb(248,47,43)" fg:x="113" fg:w="1"/><text x="16.0101%" y="207.50"></text></g><g><title>revme`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.28%)</title><rect x="15.7601%" y="213" width="0.2789%" height="15" fill="rgb(221,10,30)" fg:x="113" fg:w="2"/><text x="16.0101%" y="223.50"></text></g><g><title>revme`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="15.8996%" y="197" width="0.1395%" height="15" fill="rgb(210,229,1)" fg:x="114" fg:w="1"/><text x="16.1496%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::access_tracker::AccessTracker&gt; (1 samples, 0.14%)</title><rect x="16.0391%" y="213" width="0.1395%" height="15" fill="rgb(222,148,37)" fg:x="115" fg:w="1"/><text x="16.2891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="16.0391%" y="197" width="0.1395%" height="15" fill="rgb(234,67,33)" fg:x="115" fg:w="1"/><text x="16.2891%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm_primitives::result::ExecutionResult&gt; (1 samples, 0.14%)</title><rect x="16.1785%" y="213" width="0.1395%" height="15" fill="rgb(247,98,35)" fg:x="116" fg:w="1"/><text x="16.4285%" y="223.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloy_primitives::log::Log&gt;&gt; (1 samples, 0.14%)</title><rect x="16.1785%" y="197" width="0.1395%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="1"/><text x="16.4285%" y="207.50"></text></g><g><title>revme`bytes::bytes::promotable_even_drop (1 samples, 0.14%)</title><rect x="16.1785%" y="181" width="0.1395%" height="15" fill="rgb(213,79,30)" fg:x="116" fg:w="1"/><text x="16.4285%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.28%)</title><rect x="16.5969%" y="197" width="0.2789%" height="15" fill="rgb(246,177,23)" fg:x="119" fg:w="2"/><text x="16.8469%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.28%)</title><rect x="16.5969%" y="181" width="0.2789%" height="15" fill="rgb(230,62,27)" fg:x="119" fg:w="2"/><text x="16.8469%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="16.7364%" y="165" width="0.1395%" height="15" fill="rgb(216,154,8)" fg:x="120" fg:w="1"/><text x="16.9864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="16.7364%" y="149" width="0.1395%" height="15" fill="rgb(244,35,45)" fg:x="120" fg:w="1"/><text x="16.9864%" y="159.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.70%)</title><rect x="16.3180%" y="213" width="0.6974%" height="15" fill="rgb(251,115,12)" fg:x="117" fg:w="5"/><text x="16.5680%" y="223.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="16.8759%" y="197" width="0.1395%" height="15" fill="rgb(240,54,50)" fg:x="121" fg:w="1"/><text x="17.1259%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="17.7127%" y="197" width="0.1395%" height="15" fill="rgb(233,84,52)" fg:x="127" fg:w="1"/><text x="17.9627%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.14%)</title><rect x="17.7127%" y="181" width="0.1395%" height="15" fill="rgb(207,117,47)" fg:x="127" fg:w="1"/><text x="17.9627%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="17.8522%" y="197" width="0.1395%" height="15" fill="rgb(249,43,39)" fg:x="128" fg:w="1"/><text x="18.1022%" y="207.50"></text></g><g><title>revme`revm::db::states::cache::CacheState::apply_evm_state (8 samples, 1.12%)</title><rect x="17.0153%" y="213" width="1.1158%" height="15" fill="rgb(209,38,44)" fg:x="122" fg:w="8"/><text x="17.2653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="17.9916%" y="197" width="0.1395%" height="15" fill="rgb(236,212,23)" fg:x="129" fg:w="1"/><text x="18.2416%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.14%)</title><rect x="18.4100%" y="197" width="0.1395%" height="15" fill="rgb(242,79,21)" fg:x="132" fg:w="1"/><text x="18.6600%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.14%)</title><rect x="18.5495%" y="181" width="0.1395%" height="15" fill="rgb(211,96,35)" fg:x="133" fg:w="1"/><text x="18.7995%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.28%)</title><rect x="18.5495%" y="197" width="0.2789%" height="15" fill="rgb(253,215,40)" fg:x="133" fg:w="2"/><text x="18.7995%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="18.6890%" y="181" width="0.1395%" height="15" fill="rgb(211,81,21)" fg:x="134" fg:w="1"/><text x="18.9390%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="18.6890%" y="165" width="0.1395%" height="15" fill="rgb(208,190,38)" fg:x="134" fg:w="1"/><text x="18.9390%" y="175.50"></text></g><g><title>revme`revm::db::states::transition_state::TransitionState::add_transitions (6 samples, 0.84%)</title><rect x="18.1311%" y="213" width="0.8368%" height="15" fill="rgb(235,213,38)" fg:x="130" fg:w="6"/><text x="18.3811%" y="223.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="18.8285%" y="197" width="0.1395%" height="15" fill="rgb(237,122,38)" fg:x="135" fg:w="1"/><text x="19.0785%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (29 samples, 4.04%)</title><rect x="18.9679%" y="197" width="4.0446%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="29"/><text x="19.2179%" y="207.50">libs..</text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.14%)</title><rect x="23.0126%" y="197" width="0.1395%" height="15" fill="rgb(240,68,47)" fg:x="165" fg:w="1"/><text x="23.2626%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (14 samples, 1.95%)</title><rect x="26.0809%" y="181" width="1.9526%" height="15" fill="rgb(210,16,53)" fg:x="187" fg:w="14"/><text x="26.3309%" y="191.50">l..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (9 samples, 1.26%)</title><rect x="28.0335%" y="181" width="1.2552%" height="15" fill="rgb(235,124,12)" fg:x="201" fg:w="9"/><text x="28.2835%" y="191.50"></text></g><g><title>revme`revm::occda::Occda::main_with_db::_{{closure}} (187 samples, 26.08%)</title><rect x="3.3473%" y="229" width="26.0809%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="187"/><text x="3.5973%" y="239.50">revme`revm::occda::Occda::main_with_db::_{..</text></g><g><title>revme`std::sys::pal::unix::thread::Thread::new (75 samples, 10.46%)</title><rect x="18.9679%" y="213" width="10.4603%" height="15" fill="rgb(250,166,2)" fg:x="136" fg:w="75"/><text x="19.2179%" y="223.50">revme`std::sys:..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (45 samples, 6.28%)</title><rect x="23.1520%" y="197" width="6.2762%" height="15" fill="rgb(242,216,29)" fg:x="166" fg:w="45"/><text x="23.4020%" y="207.50">libsyste..</text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.14%)</title><rect x="29.2887%" y="181" width="0.1395%" height="15" fill="rgb(230,116,27)" fg:x="210" fg:w="1"/><text x="29.5387%" y="191.50"></text></g><g><title>revme`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.56%)</title><rect x="29.4282%" y="197" width="0.5579%" height="15" fill="rgb(228,99,48)" fg:x="211" fg:w="4"/><text x="29.6782%" y="207.50"></text></g><g><title>revme`tiny_keccak::keccakf::keccakf (4 samples, 0.56%)</title><rect x="29.4282%" y="181" width="0.5579%" height="15" fill="rgb(253,11,6)" fg:x="211" fg:w="4"/><text x="29.6782%" y="191.50"></text></g><g><title>revme`core::slice::sort::stable::driftsort_main (1 samples, 0.14%)</title><rect x="29.9861%" y="197" width="0.1395%" height="15" fill="rgb(247,143,39)" fg:x="215" fg:w="1"/><text x="30.2361%" y="207.50"></text></g><g><title>revme`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.14%)</title><rect x="29.9861%" y="181" width="0.1395%" height="15" fill="rgb(236,97,10)" fg:x="215" fg:w="1"/><text x="30.2361%" y="191.50"></text></g><g><title>revme`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.14%)</title><rect x="29.9861%" y="165" width="0.1395%" height="15" fill="rgb(233,208,19)" fg:x="215" fg:w="1"/><text x="30.2361%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="29.9861%" y="149" width="0.1395%" height="15" fill="rgb(216,164,2)" fg:x="215" fg:w="1"/><text x="30.2361%" y="159.50"></text></g><g><title>revme`tiny_keccak::keccakf::keccakf (3 samples, 0.42%)</title><rect x="30.1255%" y="197" width="0.4184%" height="15" fill="rgb(220,129,5)" fg:x="216" fg:w="3"/><text x="30.3755%" y="207.50"></text></g><g><title>revme`tiny_keccak::keccakf::keccakf (1 samples, 0.14%)</title><rect x="30.5439%" y="101" width="0.1395%" height="15" fill="rgb(242,17,10)" fg:x="219" fg:w="1"/><text x="30.7939%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="30.8229%" y="69" width="0.1395%" height="15" fill="rgb(242,107,0)" fg:x="221" fg:w="1"/><text x="31.0729%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="30.8229%" y="53" width="0.1395%" height="15" fill="rgb(251,28,31)" fg:x="221" fg:w="1"/><text x="31.0729%" y="63.50"></text></g><g><title>revme`&lt;tiny_keccak::keccak::Keccak as tiny_keccak::Hasher&gt;::update (1 samples, 0.14%)</title><rect x="30.9623%" y="69" width="0.1395%" height="15" fill="rgb(233,223,10)" fg:x="222" fg:w="1"/><text x="31.2123%" y="79.50"></text></g><g><title>revme`rlp::stream::RlpStream::note_appended (1 samples, 0.14%)</title><rect x="31.1018%" y="69" width="0.1395%" height="15" fill="rgb(215,21,27)" fg:x="223" fg:w="1"/><text x="31.3518%" y="79.50"></text></g><g><title>revme`rlp::stream::RlpStream::note_appended (1 samples, 0.14%)</title><rect x="31.1018%" y="53" width="0.1395%" height="15" fill="rgb(232,23,21)" fg:x="223" fg:w="1"/><text x="31.3518%" y="63.50"></text></g><g><title>revme`tiny_keccak::keccakf::keccakf (2 samples, 0.28%)</title><rect x="31.2413%" y="69" width="0.2789%" height="15" fill="rgb(244,5,23)" fg:x="224" fg:w="2"/><text x="31.4913%" y="79.50"></text></g><g><title>revme`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 2.37%)</title><rect x="29.4282%" y="213" width="2.3710%" height="15" fill="rgb(226,81,46)" fg:x="211" fg:w="17"/><text x="29.6782%" y="223.50">re..</text></g><g><title>revme`triehash::hash256rlp (9 samples, 1.26%)</title><rect x="30.5439%" y="197" width="1.2552%" height="15" fill="rgb(247,70,30)" fg:x="219" fg:w="9"/><text x="30.7939%" y="207.50"></text></g><g><title>revme`triehash::hash256aux (9 samples, 1.26%)</title><rect x="30.5439%" y="181" width="1.2552%" height="15" fill="rgb(212,68,19)" fg:x="219" fg:w="9"/><text x="30.7939%" y="191.50"></text></g><g><title>revme`triehash::hash256rlp (9 samples, 1.26%)</title><rect x="30.5439%" y="165" width="1.2552%" height="15" fill="rgb(240,187,13)" fg:x="219" fg:w="9"/><text x="30.7939%" y="175.50"></text></g><g><title>revme`triehash::hash256aux (9 samples, 1.26%)</title><rect x="30.5439%" y="149" width="1.2552%" height="15" fill="rgb(223,113,26)" fg:x="219" fg:w="9"/><text x="30.7939%" y="159.50"></text></g><g><title>revme`triehash::hash256rlp (9 samples, 1.26%)</title><rect x="30.5439%" y="133" width="1.2552%" height="15" fill="rgb(206,192,2)" fg:x="219" fg:w="9"/><text x="30.7939%" y="143.50"></text></g><g><title>revme`triehash::hash256aux (9 samples, 1.26%)</title><rect x="30.5439%" y="117" width="1.2552%" height="15" fill="rgb(241,108,4)" fg:x="219" fg:w="9"/><text x="30.7939%" y="127.50"></text></g><g><title>revme`triehash::hash256rlp (8 samples, 1.12%)</title><rect x="30.6834%" y="101" width="1.1158%" height="15" fill="rgb(247,173,49)" fg:x="220" fg:w="8"/><text x="30.9334%" y="111.50"></text></g><g><title>revme`triehash::hash256aux (7 samples, 0.98%)</title><rect x="30.8229%" y="85" width="0.9763%" height="15" fill="rgb(224,114,35)" fg:x="221" fg:w="7"/><text x="31.0729%" y="95.50"></text></g><g><title>revme`triehash::hash256rlp (2 samples, 0.28%)</title><rect x="31.5202%" y="69" width="0.2789%" height="15" fill="rgb(245,159,27)" fg:x="226" fg:w="2"/><text x="31.7702%" y="79.50"></text></g><g><title>revme`rlp::stream::RlpStream::append_iter (2 samples, 0.28%)</title><rect x="31.5202%" y="53" width="0.2789%" height="15" fill="rgb(245,172,44)" fg:x="226" fg:w="2"/><text x="31.7702%" y="63.50"></text></g><g><title>revme`&lt;bytes::bytes_mut::BytesMut as core::iter::traits::collect::Extend&lt;u8&gt;&gt;::extend (2 samples, 0.28%)</title><rect x="31.5202%" y="37" width="0.2789%" height="15" fill="rgb(236,23,11)" fg:x="226" fg:w="2"/><text x="31.7702%" y="47.50"></text></g><g><title>revme`core::slice::sort::stable::driftsort_main (1 samples, 0.14%)</title><rect x="31.7992%" y="213" width="0.1395%" height="15" fill="rgb(205,117,38)" fg:x="228" fg:w="1"/><text x="32.0492%" y="223.50"></text></g><g><title>revme`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.14%)</title><rect x="31.7992%" y="197" width="0.1395%" height="15" fill="rgb(237,72,25)" fg:x="228" fg:w="1"/><text x="32.0492%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="31.7992%" y="181" width="0.1395%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="32.0492%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="31.9386%" y="117" width="0.1395%" height="15" fill="rgb(217,125,39)" fg:x="229" fg:w="1"/><text x="32.1886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="31.9386%" y="101" width="0.1395%" height="15" fill="rgb(235,36,10)" fg:x="229" fg:w="1"/><text x="32.1886%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="31.9386%" y="85" width="0.1395%" height="15" fill="rgb(251,123,47)" fg:x="229" fg:w="1"/><text x="32.1886%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.14%)</title><rect x="31.9386%" y="69" width="0.1395%" height="15" fill="rgb(221,13,13)" fg:x="229" fg:w="1"/><text x="32.1886%" y="79.50"></text></g><g><title>revme`tiny_keccak::keccakf::keccakf (1 samples, 0.14%)</title><rect x="32.0781%" y="117" width="0.1395%" height="15" fill="rgb(238,131,9)" fg:x="230" fg:w="1"/><text x="32.3281%" y="127.50"></text></g><g><title>revme`rlp::impls::_&lt;impl rlp::traits::Encodable for &amp;[u8]&gt;::rlp_append (1 samples, 0.14%)</title><rect x="32.2176%" y="69" width="0.1395%" height="15" fill="rgb(211,50,8)" fg:x="231" fg:w="1"/><text x="32.4676%" y="79.50"></text></g><g><title>revme`rlp::stream::RlpStream::append_iter (1 samples, 0.14%)</title><rect x="32.3570%" y="69" width="0.1395%" height="15" fill="rgb(245,182,24)" fg:x="232" fg:w="1"/><text x="32.6070%" y="79.50"></text></g><g><title>revme`&lt;bytes::bytes_mut::BytesMut as core::iter::traits::collect::Extend&lt;u8&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="32.3570%" y="53" width="0.1395%" height="15" fill="rgb(242,14,37)" fg:x="232" fg:w="1"/><text x="32.6070%" y="63.50"></text></g><g><title>revme`revme::cmd::parallel::parallel_runner::run_parallel::_{{closure}} (224 samples, 31.24%)</title><rect x="1.3947%" y="245" width="31.2413%" height="15" fill="rgb(246,228,12)" fg:x="10" fg:w="224"/><text x="1.6447%" y="255.50">revme`revme::cmd::parallel::parallel_runner::run_p..</text></g><g><title>revme`revme::cmd::statetest::merkle_trie::state_merkle_trie_root (23 samples, 3.21%)</title><rect x="29.4282%" y="229" width="3.2078%" height="15" fill="rgb(213,55,15)" fg:x="211" fg:w="23"/><text x="29.6782%" y="239.50">rev..</text></g><g><title>revme`triehash::hash256rlp (5 samples, 0.70%)</title><rect x="31.9386%" y="213" width="0.6974%" height="15" fill="rgb(209,9,3)" fg:x="229" fg:w="5"/><text x="32.1886%" y="223.50"></text></g><g><title>revme`triehash::hash256aux (5 samples, 0.70%)</title><rect x="31.9386%" y="197" width="0.6974%" height="15" fill="rgb(230,59,30)" fg:x="229" fg:w="5"/><text x="32.1886%" y="207.50"></text></g><g><title>revme`triehash::hash256rlp (5 samples, 0.70%)</title><rect x="31.9386%" y="181" width="0.6974%" height="15" fill="rgb(209,121,21)" fg:x="229" fg:w="5"/><text x="32.1886%" y="191.50"></text></g><g><title>revme`triehash::hash256aux (5 samples, 0.70%)</title><rect x="31.9386%" y="165" width="0.6974%" height="15" fill="rgb(220,109,13)" fg:x="229" fg:w="5"/><text x="32.1886%" y="175.50"></text></g><g><title>revme`triehash::hash256rlp (5 samples, 0.70%)</title><rect x="31.9386%" y="149" width="0.6974%" height="15" fill="rgb(232,18,1)" fg:x="229" fg:w="5"/><text x="32.1886%" y="159.50"></text></g><g><title>revme`triehash::hash256aux (5 samples, 0.70%)</title><rect x="31.9386%" y="133" width="0.6974%" height="15" fill="rgb(215,41,42)" fg:x="229" fg:w="5"/><text x="32.1886%" y="143.50"></text></g><g><title>revme`triehash::hash256rlp (3 samples, 0.42%)</title><rect x="32.2176%" y="117" width="0.4184%" height="15" fill="rgb(224,123,36)" fg:x="231" fg:w="3"/><text x="32.4676%" y="127.50"></text></g><g><title>revme`triehash::hash256aux (3 samples, 0.42%)</title><rect x="32.2176%" y="101" width="0.4184%" height="15" fill="rgb(240,125,3)" fg:x="231" fg:w="3"/><text x="32.4676%" y="111.50"></text></g><g><title>revme`triehash::hash256rlp (3 samples, 0.42%)</title><rect x="32.2176%" y="85" width="0.4184%" height="15" fill="rgb(205,98,50)" fg:x="231" fg:w="3"/><text x="32.4676%" y="95.50"></text></g><g><title>revme`triehash::hash256aux (1 samples, 0.14%)</title><rect x="32.4965%" y="69" width="0.1395%" height="15" fill="rgb(205,185,37)" fg:x="233" fg:w="1"/><text x="32.7465%" y="79.50"></text></g><g><title>revme`triehash::hash256rlp (1 samples, 0.14%)</title><rect x="32.4965%" y="53" width="0.1395%" height="15" fill="rgb(238,207,15)" fg:x="233" fg:w="1"/><text x="32.7465%" y="63.50"></text></g><g><title>revme`rlp::impls::_&lt;impl rlp::traits::Encodable for &amp;[u8]&gt;::rlp_append (1 samples, 0.14%)</title><rect x="32.4965%" y="37" width="0.1395%" height="15" fill="rgb(213,199,42)" fg:x="233" fg:w="1"/><text x="32.7465%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.28%)</title><rect x="32.6360%" y="229" width="0.2789%" height="15" fill="rgb(235,201,11)" fg:x="234" fg:w="2"/><text x="32.8860%" y="239.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="33.0544%" y="197" width="0.1395%" height="15" fill="rgb(207,46,11)" fg:x="237" fg:w="1"/><text x="33.3044%" y="207.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="33.0544%" y="181" width="0.1395%" height="15" fill="rgb(241,35,35)" fg:x="237" fg:w="1"/><text x="33.3044%" y="191.50"></text></g><g><title>revme`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.28%)</title><rect x="33.0544%" y="213" width="0.2789%" height="15" fill="rgb(243,32,47)" fg:x="237" fg:w="2"/><text x="33.3044%" y="223.50"></text></g><g><title>revme`ruint::support::serde::_&lt;impl serde::de::Deserialize for ruint::Uint&lt;_,_&gt;&gt;::deserialize (1 samples, 0.14%)</title><rect x="33.1939%" y="197" width="0.1395%" height="15" fill="rgb(247,202,23)" fg:x="238" fg:w="1"/><text x="33.4439%" y="207.50"></text></g><g><title>revme`&lt;ruint::support::serde::HrVisitor&lt;_,_&gt; as serde::de::Visitor&gt;::visit_str (1 samples, 0.14%)</title><rect x="33.1939%" y="181" width="0.1395%" height="15" fill="rgb(219,102,11)" fg:x="238" fg:w="1"/><text x="33.4439%" y="191.50"></text></g><g><title>revme`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.14%)</title><rect x="33.3333%" y="213" width="0.1395%" height="15" fill="rgb(243,110,44)" fg:x="239" fg:w="1"/><text x="33.5833%" y="223.50"></text></g><g><title>revme`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.14%)</title><rect x="33.4728%" y="197" width="0.1395%" height="15" fill="rgb(222,74,54)" fg:x="240" fg:w="1"/><text x="33.7228%" y="207.50"></text></g><g><title>revme`alloy_primitives::bytes_::serde::_&lt;impl serde::de::Deserialize for alloy_primitives::bytes_::Bytes&gt;::deserialize (2 samples, 0.28%)</title><rect x="33.4728%" y="213" width="0.2789%" height="15" fill="rgb(216,99,12)" fg:x="240" fg:w="2"/><text x="33.7228%" y="223.50"></text></g><g><title>revme`const_hex::decode::decode_inner (1 samples, 0.14%)</title><rect x="33.6123%" y="197" width="0.1395%" height="15" fill="rgb(226,22,26)" fg:x="241" fg:w="1"/><text x="33.8623%" y="207.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="33.7517%" y="213" width="0.1395%" height="15" fill="rgb(217,163,10)" fg:x="242" fg:w="1"/><text x="34.0017%" y="223.50"></text></g><g><title>revme`serde_json::de::from_trait (11 samples, 1.53%)</title><rect x="32.6360%" y="245" width="1.5342%" height="15" fill="rgb(213,25,53)" fg:x="234" fg:w="11"/><text x="32.8860%" y="255.50"></text></g><g><title>revme`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (9 samples, 1.26%)</title><rect x="32.9149%" y="229" width="1.2552%" height="15" fill="rgb(252,105,26)" fg:x="236" fg:w="9"/><text x="33.1649%" y="239.50"></text></g><g><title>revme`ruint::support::serde::_&lt;impl serde::de::Deserialize for ruint::Uint&lt;_,_&gt;&gt;::deserialize (2 samples, 0.28%)</title><rect x="33.8912%" y="213" width="0.2789%" height="15" fill="rgb(220,39,43)" fg:x="243" fg:w="2"/><text x="34.1412%" y="223.50"></text></g><g><title>revme`&lt;ruint::support::serde::HrVisitor&lt;_,_&gt; as serde::de::Visitor&gt;::visit_str (2 samples, 0.28%)</title><rect x="33.8912%" y="197" width="0.2789%" height="15" fill="rgb(229,68,48)" fg:x="243" fg:w="2"/><text x="34.1412%" y="207.50"></text></g><g><title>dyld`start (246 samples, 34.31%)</title><rect x="0.0000%" y="325" width="34.3096%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="246"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>revme`main (246 samples, 34.31%)</title><rect x="0.0000%" y="309" width="34.3096%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="246"/><text x="0.2500%" y="319.50">revme`main</text></g><g><title>revme`std::sys::backtrace::__rust_begin_short_backtrace (246 samples, 34.31%)</title><rect x="0.0000%" y="293" width="34.3096%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="246"/><text x="0.2500%" y="303.50">revme`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>revme`revme::main (246 samples, 34.31%)</title><rect x="0.0000%" y="277" width="34.3096%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="246"/><text x="0.2500%" y="287.50">revme`revme::main</text></g><g><title>revme`revme::cmd::parallel::Cmd::run (244 samples, 34.03%)</title><rect x="0.2789%" y="261" width="34.0307%" height="15" fill="rgb(249,185,26)" fg:x="2" fg:w="244"/><text x="0.5289%" y="271.50">revme`revme::cmd::parallel::Cmd::run</text></g><g><title>revme`tokio::runtime::builder::Builder::build (1 samples, 0.14%)</title><rect x="34.1702%" y="245" width="0.1395%" height="15" fill="rgb(249,174,33)" fg:x="245" fg:w="1"/><text x="34.4202%" y="255.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.14%)</title><rect x="34.1702%" y="229" width="0.1395%" height="15" fill="rgb(233,201,37)" fg:x="245" fg:w="1"/><text x="34.4202%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (1 samples, 0.14%)</title><rect x="34.1702%" y="213" width="0.1395%" height="15" fill="rgb(221,78,26)" fg:x="245" fg:w="1"/><text x="34.4202%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (11 samples, 1.53%)</title><rect x="34.3096%" y="325" width="1.5342%" height="15" fill="rgb(250,127,30)" fg:x="246" fg:w="11"/><text x="34.5596%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.14%)</title><rect x="35.8438%" y="325" width="0.1395%" height="15" fill="rgb(230,49,44)" fg:x="257" fg:w="1"/><text x="36.0938%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (3 samples, 0.42%)</title><rect x="41.9805%" y="309" width="0.4184%" height="15" fill="rgb(229,67,23)" fg:x="301" fg:w="3"/><text x="42.2305%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (2 samples, 0.28%)</title><rect x="42.3989%" y="293" width="0.2789%" height="15" fill="rgb(249,83,47)" fg:x="304" fg:w="2"/><text x="42.6489%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (16 samples, 2.23%)</title><rect x="42.6778%" y="293" width="2.2315%" height="15" fill="rgb(215,43,3)" fg:x="306" fg:w="16"/><text x="42.9278%" y="303.50">l..</text></g><g><title>libsystem_kernel.dylib`__sigaltstack (4 samples, 0.56%)</title><rect x="44.9093%" y="293" width="0.5579%" height="15" fill="rgb(238,154,13)" fg:x="322" fg:w="4"/><text x="45.1593%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (23 samples, 3.21%)</title><rect x="45.4672%" y="261" width="3.2078%" height="15" fill="rgb(219,56,2)" fg:x="326" fg:w="23"/><text x="45.7172%" y="271.50">lib..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (27 samples, 3.77%)</title><rect x="45.4672%" y="277" width="3.7657%" height="15" fill="rgb(233,0,4)" fg:x="326" fg:w="27"/><text x="45.7172%" y="287.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (4 samples, 0.56%)</title><rect x="48.6750%" y="261" width="0.5579%" height="15" fill="rgb(235,30,7)" fg:x="349" fg:w="4"/><text x="48.9250%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (4 samples, 0.56%)</title><rect x="48.6750%" y="245" width="0.5579%" height="15" fill="rgb(250,79,13)" fg:x="349" fg:w="4"/><text x="48.9250%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="51.4644%" y="261" width="0.1395%" height="15" fill="rgb(211,146,34)" fg:x="369" fg:w="1"/><text x="51.7144%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (46 samples, 6.42%)</title><rect x="45.4672%" y="293" width="6.4156%" height="15" fill="rgb(228,22,38)" fg:x="326" fg:w="46"/><text x="45.7172%" y="303.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (19 samples, 2.65%)</title><rect x="49.2329%" y="277" width="2.6499%" height="15" fill="rgb(235,168,5)" fg:x="353" fg:w="19"/><text x="49.4829%" y="287.50">li..</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.28%)</title><rect x="51.6039%" y="261" width="0.2789%" height="15" fill="rgb(221,155,16)" fg:x="370" fg:w="2"/><text x="51.8539%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.28%)</title><rect x="51.6039%" y="245" width="0.2789%" height="15" fill="rgb(215,215,53)" fg:x="370" fg:w="2"/><text x="51.8539%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.28%)</title><rect x="51.6039%" y="229" width="0.2789%" height="15" fill="rgb(223,4,10)" fg:x="370" fg:w="2"/><text x="51.8539%" y="239.50"></text></g><g><title>dyld`dyld4::APIs::_tlv_atexit(void (*) (1 samples, 0.14%)</title><rect x="51.8828%" y="277" width="0.1395%" height="15" fill="rgb(234,103,6)" fg:x="372" fg:w="1"/><text x="52.1328%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.14%)</title><rect x="52.0223%" y="277" width="0.1395%" height="15" fill="rgb(227,97,0)" fg:x="373" fg:w="1"/><text x="52.2723%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (11 samples, 1.53%)</title><rect x="52.1618%" y="277" width="1.5342%" height="15" fill="rgb(234,150,53)" fg:x="374" fg:w="11"/><text x="52.4118%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (5 samples, 0.70%)</title><rect x="53.6960%" y="277" width="0.6974%" height="15" fill="rgb(228,201,54)" fg:x="385" fg:w="5"/><text x="53.9460%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.14%)</title><rect x="54.6722%" y="229" width="0.1395%" height="15" fill="rgb(222,22,37)" fg:x="392" fg:w="1"/><text x="54.9222%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.42%)</title><rect x="54.5328%" y="245" width="0.4184%" height="15" fill="rgb(237,53,32)" fg:x="391" fg:w="3"/><text x="54.7828%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="54.8117%" y="229" width="0.1395%" height="15" fill="rgb(233,25,53)" fg:x="393" fg:w="1"/><text x="55.0617%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 1.39%)</title><rect x="54.9512%" y="245" width="1.3947%" height="15" fill="rgb(210,40,34)" fg:x="394" fg:w="10"/><text x="55.2012%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="56.3459%" y="245" width="0.1395%" height="15" fill="rgb(241,220,44)" fg:x="404" fg:w="1"/><text x="56.5959%" y="255.50"></text></g><g><title>revme`DYLD-STUB$$memcpy (1 samples, 0.14%)</title><rect x="56.4854%" y="245" width="0.1395%" height="15" fill="rgb(235,28,35)" fg:x="405" fg:w="1"/><text x="56.7354%" y="255.50"></text></g><g><title>revme`core::ops::function::Fn::call (3 samples, 0.42%)</title><rect x="56.6248%" y="245" width="0.4184%" height="15" fill="rgb(210,56,17)" fg:x="406" fg:w="3"/><text x="56.8748%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.28%)</title><rect x="63.1799%" y="229" width="0.2789%" height="15" fill="rgb(224,130,29)" fg:x="453" fg:w="2"/><text x="63.4299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="63.4589%" y="229" width="0.1395%" height="15" fill="rgb(235,212,8)" fg:x="455" fg:w="1"/><text x="63.7089%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="63.5983%" y="229" width="0.1395%" height="15" fill="rgb(223,33,50)" fg:x="456" fg:w="1"/><text x="63.8483%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.42%)</title><rect x="63.7378%" y="229" width="0.4184%" height="15" fill="rgb(219,149,13)" fg:x="457" fg:w="3"/><text x="63.9878%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.42%)</title><rect x="64.1562%" y="229" width="0.4184%" height="15" fill="rgb(250,156,29)" fg:x="460" fg:w="3"/><text x="64.4062%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.14%)</title><rect x="64.4351%" y="213" width="0.1395%" height="15" fill="rgb(216,193,19)" fg:x="462" fg:w="1"/><text x="64.6851%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="64.5746%" y="229" width="0.1395%" height="15" fill="rgb(216,135,14)" fg:x="463" fg:w="1"/><text x="64.8246%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="64.7141%" y="229" width="0.1395%" height="15" fill="rgb(241,47,5)" fg:x="464" fg:w="1"/><text x="64.9641%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 1.12%)</title><rect x="64.8536%" y="229" width="1.1158%" height="15" fill="rgb(233,42,35)" fg:x="465" fg:w="8"/><text x="65.1036%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.84%)</title><rect x="65.9693%" y="229" width="0.8368%" height="15" fill="rgb(231,13,6)" fg:x="473" fg:w="6"/><text x="66.2193%" y="239.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="66.8061%" y="213" width="0.1395%" height="15" fill="rgb(207,181,40)" fg:x="479" fg:w="1"/><text x="67.0561%" y="223.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="67.2245%" y="197" width="0.1395%" height="15" fill="rgb(254,173,49)" fg:x="482" fg:w="1"/><text x="67.4745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.42%)</title><rect x="67.5035%" y="181" width="0.4184%" height="15" fill="rgb(221,1,38)" fg:x="484" fg:w="3"/><text x="67.7535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.42%)</title><rect x="67.5035%" y="165" width="0.4184%" height="15" fill="rgb(206,124,46)" fg:x="484" fg:w="3"/><text x="67.7535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.28%)</title><rect x="67.6430%" y="149" width="0.2789%" height="15" fill="rgb(249,21,11)" fg:x="485" fg:w="2"/><text x="67.8930%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="67.7824%" y="133" width="0.1395%" height="15" fill="rgb(222,201,40)" fg:x="486" fg:w="1"/><text x="68.0324%" y="143.50"></text></g><g><title>revme`&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (9 samples, 1.26%)</title><rect x="66.8061%" y="229" width="1.2552%" height="15" fill="rgb(235,61,29)" fg:x="479" fg:w="9"/><text x="67.0561%" y="239.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 1.12%)</title><rect x="66.9456%" y="213" width="1.1158%" height="15" fill="rgb(219,207,3)" fg:x="480" fg:w="8"/><text x="67.1956%" y="223.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.70%)</title><rect x="67.3640%" y="197" width="0.6974%" height="15" fill="rgb(222,56,46)" fg:x="483" fg:w="5"/><text x="67.6140%" y="207.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="67.9219%" y="181" width="0.1395%" height="15" fill="rgb(239,76,54)" fg:x="487" fg:w="1"/><text x="68.1719%" y="191.50"></text></g><g><title>revme`&lt;revm_primitives::env::Env as core::clone::Clone&gt;::clone (3 samples, 0.42%)</title><rect x="68.0614%" y="229" width="0.4184%" height="15" fill="rgb(231,124,27)" fg:x="488" fg:w="3"/><text x="68.3114%" y="239.50"></text></g><g><title>revme`bytes::bytes::shared_clone (2 samples, 0.28%)</title><rect x="68.4798%" y="229" width="0.2789%" height="15" fill="rgb(249,195,6)" fg:x="491" fg:w="2"/><text x="68.7298%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.28%)</title><rect x="68.7587%" y="213" width="0.2789%" height="15" fill="rgb(237,174,47)" fg:x="493" fg:w="2"/><text x="69.0087%" y="223.50"></text></g><g><title>revme`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.28%)</title><rect x="69.0377%" y="197" width="0.2789%" height="15" fill="rgb(206,201,31)" fg:x="495" fg:w="2"/><text x="69.2877%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.28%)</title><rect x="69.0377%" y="181" width="0.2789%" height="15" fill="rgb(231,57,52)" fg:x="495" fg:w="2"/><text x="69.2877%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.28%)</title><rect x="69.0377%" y="165" width="0.2789%" height="15" fill="rgb(248,177,22)" fg:x="495" fg:w="2"/><text x="69.2877%" y="175.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::frame::FrameData&gt; (3 samples, 0.42%)</title><rect x="69.0377%" y="213" width="0.4184%" height="15" fill="rgb(215,211,37)" fg:x="495" fg:w="3"/><text x="69.2877%" y="223.50"></text></g><g><title>revme`bytes::bytes::shared_drop (1 samples, 0.14%)</title><rect x="69.3166%" y="197" width="0.1395%" height="15" fill="rgb(241,128,51)" fg:x="497" fg:w="1"/><text x="69.5666%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.14%)</title><rect x="69.3166%" y="181" width="0.1395%" height="15" fill="rgb(227,165,31)" fg:x="497" fg:w="1"/><text x="69.5666%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="69.4561%" y="197" width="0.1395%" height="15" fill="rgb(228,167,24)" fg:x="498" fg:w="1"/><text x="69.7061%" y="207.50"></text></g><g><title>revme`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.14%)</title><rect x="69.5955%" y="197" width="0.1395%" height="15" fill="rgb(228,143,12)" fg:x="499" fg:w="1"/><text x="69.8455%" y="207.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_account (1 samples, 0.14%)</title><rect x="69.7350%" y="197" width="0.1395%" height="15" fill="rgb(249,149,8)" fg:x="500" fg:w="1"/><text x="69.9850%" y="207.50"></text></g><g><title>revme`revm::journaled_state::ReadWriteSet::add_read (1 samples, 0.14%)</title><rect x="69.7350%" y="181" width="0.1395%" height="15" fill="rgb(243,35,44)" fg:x="500" fg:w="1"/><text x="69.9850%" y="191.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="69.7350%" y="165" width="0.1395%" height="15" fill="rgb(246,89,9)" fg:x="500" fg:w="1"/><text x="69.9850%" y="175.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="69.7350%" y="149" width="0.1395%" height="15" fill="rgb(233,213,13)" fg:x="500" fg:w="1"/><text x="69.9850%" y="159.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="69.8745%" y="165" width="0.1395%" height="15" fill="rgb(233,141,41)" fg:x="501" fg:w="1"/><text x="70.1245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="70.1534%" y="149" width="0.1395%" height="15" fill="rgb(239,167,4)" fg:x="503" fg:w="1"/><text x="70.4034%" y="159.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.42%)</title><rect x="70.0139%" y="165" width="0.4184%" height="15" fill="rgb(209,217,16)" fg:x="502" fg:w="3"/><text x="70.2639%" y="175.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="70.2929%" y="149" width="0.1395%" height="15" fill="rgb(219,88,35)" fg:x="504" fg:w="1"/><text x="70.5429%" y="159.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_code (6 samples, 0.84%)</title><rect x="69.8745%" y="197" width="0.8368%" height="15" fill="rgb(220,193,23)" fg:x="501" fg:w="6"/><text x="70.1245%" y="207.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_account (6 samples, 0.84%)</title><rect x="69.8745%" y="181" width="0.8368%" height="15" fill="rgb(230,90,52)" fg:x="501" fg:w="6"/><text x="70.1245%" y="191.50"></text></g><g><title>revme`revm::journaled_state::ReadWriteSet::add_read (2 samples, 0.28%)</title><rect x="70.4324%" y="165" width="0.2789%" height="15" fill="rgb(252,106,19)" fg:x="505" fg:w="2"/><text x="70.6824%" y="175.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="70.5718%" y="149" width="0.1395%" height="15" fill="rgb(206,74,20)" fg:x="506" fg:w="1"/><text x="70.8218%" y="159.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="70.5718%" y="133" width="0.1395%" height="15" fill="rgb(230,138,44)" fg:x="506" fg:w="1"/><text x="70.8218%" y="143.50"></text></g><g><title>revme`revm_interpreter::interpreter::Interpreter::new (2 samples, 0.28%)</title><rect x="70.7113%" y="197" width="0.2789%" height="15" fill="rgb(235,182,43)" fg:x="507" fg:w="2"/><text x="70.9613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.28%)</title><rect x="70.7113%" y="181" width="0.2789%" height="15" fill="rgb(242,16,51)" fg:x="507" fg:w="2"/><text x="70.9613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.28%)</title><rect x="70.7113%" y="165" width="0.2789%" height="15" fill="rgb(248,9,4)" fg:x="507" fg:w="2"/><text x="70.9613%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.28%)</title><rect x="70.7113%" y="149" width="0.2789%" height="15" fill="rgb(210,31,22)" fg:x="507" fg:w="2"/><text x="70.9613%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.28%)</title><rect x="70.7113%" y="133" width="0.2789%" height="15" fill="rgb(239,54,39)" fg:x="507" fg:w="2"/><text x="70.9613%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="71.1297%" y="181" width="0.1395%" height="15" fill="rgb(230,99,41)" fg:x="510" fg:w="1"/><text x="71.3797%" y="191.50"></text></g><g><title>revme`revm_interpreter::interpreter::analysis::analyze (1 samples, 0.14%)</title><rect x="71.2692%" y="181" width="0.1395%" height="15" fill="rgb(253,106,12)" fg:x="511" fg:w="1"/><text x="71.5192%" y="191.50"></text></g><g><title>revme`revm::context::evm_context::EvmContext&lt;DB&gt;::make_call_frame (80 samples, 11.16%)</title><rect x="69.4561%" y="213" width="11.1576%" height="15" fill="rgb(213,46,41)" fg:x="498" fg:w="80"/><text x="69.7061%" y="223.50">revme`revm::cont..</text></g><g><title>revme`revm_interpreter::interpreter::contract::Contract::new (69 samples, 9.62%)</title><rect x="70.9902%" y="197" width="9.6234%" height="15" fill="rgb(215,133,35)" fg:x="509" fg:w="69"/><text x="71.2402%" y="207.50">revme`revm_int..</text></g><g><title>revme`revm_interpreter::interpreter::analysis::to_analysed (66 samples, 9.21%)</title><rect x="71.4086%" y="181" width="9.2050%" height="15" fill="rgb(213,28,5)" fg:x="512" fg:w="66"/><text x="71.6586%" y="191.50">revme`revm_in..</text></g><g><title>revme`revm_interpreter::interpreter::analysis::analyze (66 samples, 9.21%)</title><rect x="71.4086%" y="165" width="9.2050%" height="15" fill="rgb(215,77,49)" fg:x="512" fg:w="66"/><text x="71.6586%" y="175.50">revme`revm_in..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.4742%" y="149" width="0.1395%" height="15" fill="rgb(248,100,22)" fg:x="577" fg:w="1"/><text x="80.7242%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.4742%" y="133" width="0.1395%" height="15" fill="rgb(208,67,9)" fg:x="577" fg:w="1"/><text x="80.7242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="80.4742%" y="117" width="0.1395%" height="15" fill="rgb(219,133,21)" fg:x="577" fg:w="1"/><text x="80.7242%" y="127.50"></text></g><g><title>revme`revm::handler::mainnet::post_execution::output (1 samples, 0.14%)</title><rect x="80.6137%" y="213" width="0.1395%" height="15" fill="rgb(246,46,29)" fg:x="578" fg:w="1"/><text x="80.8637%" y="223.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::finalize (1 samples, 0.14%)</title><rect x="80.6137%" y="197" width="0.1395%" height="15" fill="rgb(246,185,52)" fg:x="578" fg:w="1"/><text x="80.8637%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="80.6137%" y="181" width="0.1395%" height="15" fill="rgb(252,136,11)" fg:x="578" fg:w="1"/><text x="80.8637%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.42%)</title><rect x="80.8926%" y="181" width="0.4184%" height="15" fill="rgb(219,138,53)" fg:x="580" fg:w="3"/><text x="81.1426%" y="191.50"></text></g><g><title>revme`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.14%)</title><rect x="81.3110%" y="181" width="0.1395%" height="15" fill="rgb(211,51,23)" fg:x="583" fg:w="1"/><text x="81.5610%" y="191.50"></text></g><g><title>revme`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="81.3110%" y="165" width="0.1395%" height="15" fill="rgb(247,221,28)" fg:x="583" fg:w="1"/><text x="81.5610%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="81.3110%" y="149" width="0.1395%" height="15" fill="rgb(251,222,45)" fg:x="583" fg:w="1"/><text x="81.5610%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="81.3110%" y="133" width="0.1395%" height="15" fill="rgb(217,162,53)" fg:x="583" fg:w="1"/><text x="81.5610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="81.3110%" y="117" width="0.1395%" height="15" fill="rgb(229,93,14)" fg:x="583" fg:w="1"/><text x="81.5610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="81.3110%" y="101" width="0.1395%" height="15" fill="rgb(209,67,49)" fg:x="583" fg:w="1"/><text x="81.5610%" y="111.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="81.4505%" y="181" width="0.1395%" height="15" fill="rgb(213,87,29)" fg:x="584" fg:w="1"/><text x="81.7005%" y="191.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="81.5900%" y="181" width="0.1395%" height="15" fill="rgb(205,151,52)" fg:x="585" fg:w="1"/><text x="81.8400%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="81.5900%" y="165" width="0.1395%" height="15" fill="rgb(253,215,39)" fg:x="585" fg:w="1"/><text x="81.8400%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="81.7294%" y="165" width="0.1395%" height="15" fill="rgb(221,220,41)" fg:x="586" fg:w="1"/><text x="81.9794%" y="175.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.42%)</title><rect x="81.7294%" y="181" width="0.4184%" height="15" fill="rgb(218,133,21)" fg:x="586" fg:w="3"/><text x="81.9794%" y="191.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.28%)</title><rect x="81.8689%" y="165" width="0.2789%" height="15" fill="rgb(221,193,43)" fg:x="587" fg:w="2"/><text x="82.1189%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.28%)</title><rect x="81.8689%" y="149" width="0.2789%" height="15" fill="rgb(240,128,52)" fg:x="587" fg:w="2"/><text x="82.1189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.28%)</title><rect x="81.8689%" y="133" width="0.2789%" height="15" fill="rgb(253,114,12)" fg:x="587" fg:w="2"/><text x="82.1189%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.28%)</title><rect x="81.8689%" y="117" width="0.2789%" height="15" fill="rgb(215,223,47)" fg:x="587" fg:w="2"/><text x="82.1189%" y="127.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_code (11 samples, 1.53%)</title><rect x="80.7531%" y="213" width="1.5342%" height="15" fill="rgb(248,225,23)" fg:x="579" fg:w="11"/><text x="81.0031%" y="223.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_account (10 samples, 1.39%)</title><rect x="80.8926%" y="197" width="1.3947%" height="15" fill="rgb(250,108,0)" fg:x="580" fg:w="10"/><text x="81.1426%" y="207.50"></text></g><g><title>revme`revm::journaled_state::ReadWriteSet::add_read (1 samples, 0.14%)</title><rect x="82.1478%" y="181" width="0.1395%" height="15" fill="rgb(228,208,7)" fg:x="589" fg:w="1"/><text x="82.3978%" y="191.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="82.1478%" y="165" width="0.1395%" height="15" fill="rgb(244,45,10)" fg:x="589" fg:w="1"/><text x="82.3978%" y="175.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="82.1478%" y="149" width="0.1395%" height="15" fill="rgb(207,125,25)" fg:x="589" fg:w="1"/><text x="82.3978%" y="159.50"></text></g><g><title>revme`revm_interpreter::instructions::bitwise::bitand (1 samples, 0.14%)</title><rect x="82.2873%" y="213" width="0.1395%" height="15" fill="rgb(210,195,18)" fg:x="590" fg:w="1"/><text x="82.5373%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::bitwise::eq (1 samples, 0.14%)</title><rect x="82.4268%" y="213" width="0.1395%" height="15" fill="rgb(249,80,12)" fg:x="591" fg:w="1"/><text x="82.6768%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::bitwise::iszero (2 samples, 0.28%)</title><rect x="82.5662%" y="213" width="0.2789%" height="15" fill="rgb(221,65,9)" fg:x="592" fg:w="2"/><text x="82.8162%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::control::jump (2 samples, 0.28%)</title><rect x="82.8452%" y="213" width="0.2789%" height="15" fill="rgb(235,49,36)" fg:x="594" fg:w="2"/><text x="83.0952%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::stack::dup (2 samples, 0.28%)</title><rect x="83.1241%" y="213" width="0.2789%" height="15" fill="rgb(225,32,20)" fg:x="596" fg:w="2"/><text x="83.3741%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::stack::pop (1 samples, 0.14%)</title><rect x="83.4031%" y="213" width="0.1395%" height="15" fill="rgb(215,141,46)" fg:x="598" fg:w="1"/><text x="83.6531%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::stack::push (1 samples, 0.14%)</title><rect x="83.5425%" y="213" width="0.1395%" height="15" fill="rgb(250,160,47)" fg:x="599" fg:w="1"/><text x="83.7925%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::system::calldatasize (1 samples, 0.14%)</title><rect x="83.6820%" y="213" width="0.1395%" height="15" fill="rgb(216,222,40)" fg:x="600" fg:w="1"/><text x="83.9320%" y="223.50"></text></g><g><title>revme`revm_interpreter::instructions::system::callvalue (3 samples, 0.42%)</title><rect x="83.8215%" y="213" width="0.4184%" height="15" fill="rgb(234,217,39)" fg:x="601" fg:w="3"/><text x="84.0715%" y="223.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="85.6346%" y="181" width="0.1395%" height="15" fill="rgb(207,178,40)" fg:x="614" fg:w="1"/><text x="85.8846%" y="191.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="86.0530%" y="149" width="0.1395%" height="15" fill="rgb(221,136,13)" fg:x="617" fg:w="1"/><text x="86.3030%" y="159.50"></text></g><g><title>revme`&lt;revm_primitives::db::WrapDatabaseRef&lt;T&gt; as revm_primitives::db::Database&gt;::storage (2 samples, 0.28%)</title><rect x="86.0530%" y="165" width="0.2789%" height="15" fill="rgb(249,199,10)" fg:x="617" fg:w="2"/><text x="86.3030%" y="175.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="86.1925%" y="149" width="0.1395%" height="15" fill="rgb(249,222,13)" fg:x="618" fg:w="1"/><text x="86.4425%" y="159.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="86.3319%" y="165" width="0.1395%" height="15" fill="rgb(244,185,38)" fg:x="619" fg:w="1"/><text x="86.5819%" y="175.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.28%)</title><rect x="86.4714%" y="165" width="0.2789%" height="15" fill="rgb(236,202,9)" fg:x="620" fg:w="2"/><text x="86.7214%" y="175.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="86.6109%" y="149" width="0.1395%" height="15" fill="rgb(250,229,37)" fg:x="621" fg:w="1"/><text x="86.8609%" y="159.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="86.7503%" y="165" width="0.1395%" height="15" fill="rgb(206,174,23)" fg:x="622" fg:w="1"/><text x="87.0003%" y="175.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="86.7503%" y="149" width="0.1395%" height="15" fill="rgb(211,33,43)" fg:x="622" fg:w="1"/><text x="87.0003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="86.7503%" y="133" width="0.1395%" height="15" fill="rgb(245,58,50)" fg:x="622" fg:w="1"/><text x="87.0003%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="86.7503%" y="117" width="0.1395%" height="15" fill="rgb(244,68,36)" fg:x="622" fg:w="1"/><text x="87.0003%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="86.7503%" y="101" width="0.1395%" height="15" fill="rgb(232,229,15)" fg:x="622" fg:w="1"/><text x="87.0003%" y="111.50"></text></g><g><title>revme`revm_interpreter::instructions::host::sload (10 samples, 1.39%)</title><rect x="85.6346%" y="197" width="1.3947%" height="15" fill="rgb(254,30,23)" fg:x="614" fg:w="10"/><text x="85.8846%" y="207.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::sload (9 samples, 1.26%)</title><rect x="85.7741%" y="181" width="1.2552%" height="15" fill="rgb(235,160,14)" fg:x="615" fg:w="9"/><text x="86.0241%" y="191.50"></text></g><g><title>revme`revm::journaled_state::ReadWriteSet::add_read (1 samples, 0.14%)</title><rect x="86.8898%" y="165" width="0.1395%" height="15" fill="rgb(212,155,44)" fg:x="623" fg:w="1"/><text x="87.1398%" y="175.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="86.8898%" y="149" width="0.1395%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="1"/><text x="87.1398%" y="159.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="86.8898%" y="133" width="0.1395%" height="15" fill="rgb(234,177,6)" fg:x="623" fg:w="1"/><text x="87.1398%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.14%)</title><rect x="87.0293%" y="165" width="0.1395%" height="15" fill="rgb(217,24,9)" fg:x="624" fg:w="1"/><text x="87.2793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="87.1688%" y="69" width="0.1395%" height="15" fill="rgb(220,13,46)" fg:x="625" fg:w="1"/><text x="87.4188%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.28%)</title><rect x="87.1688%" y="85" width="0.2789%" height="15" fill="rgb(239,221,27)" fg:x="625" fg:w="2"/><text x="87.4188%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="87.3082%" y="69" width="0.1395%" height="15" fill="rgb(222,198,25)" fg:x="626" fg:w="1"/><text x="87.5582%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="87.3082%" y="53" width="0.1395%" height="15" fill="rgb(211,99,13)" fg:x="626" fg:w="1"/><text x="87.5582%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.42%)</title><rect x="87.1688%" y="101" width="0.4184%" height="15" fill="rgb(232,111,31)" fg:x="625" fg:w="3"/><text x="87.4188%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.14%)</title><rect x="87.4477%" y="85" width="0.1395%" height="15" fill="rgb(245,82,37)" fg:x="627" fg:w="1"/><text x="87.6977%" y="95.50"></text></g><g><title>revme`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.56%)</title><rect x="87.1688%" y="165" width="0.5579%" height="15" fill="rgb(227,149,46)" fg:x="625" fg:w="4"/><text x="87.4188%" y="175.50"></text></g><g><title>revme`alloc::raw_vec::finish_grow (4 samples, 0.56%)</title><rect x="87.1688%" y="149" width="0.5579%" height="15" fill="rgb(218,36,50)" fg:x="625" fg:w="4"/><text x="87.4188%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.56%)</title><rect x="87.1688%" y="133" width="0.5579%" height="15" fill="rgb(226,80,48)" fg:x="625" fg:w="4"/><text x="87.4188%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.56%)</title><rect x="87.1688%" y="117" width="0.5579%" height="15" fill="rgb(238,224,15)" fg:x="625" fg:w="4"/><text x="87.4188%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="87.5872%" y="101" width="0.1395%" height="15" fill="rgb(241,136,10)" fg:x="628" fg:w="1"/><text x="87.8372%" y="111.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="87.7266%" y="165" width="0.1395%" height="15" fill="rgb(208,32,45)" fg:x="629" fg:w="1"/><text x="87.9766%" y="175.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="87.7266%" y="149" width="0.1395%" height="15" fill="rgb(207,135,9)" fg:x="629" fg:w="1"/><text x="87.9766%" y="159.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::sload (2 samples, 0.28%)</title><rect x="87.8661%" y="165" width="0.2789%" height="15" fill="rgb(206,86,44)" fg:x="630" fg:w="2"/><text x="88.1161%" y="175.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.28%)</title><rect x="87.8661%" y="149" width="0.2789%" height="15" fill="rgb(245,177,15)" fg:x="630" fg:w="2"/><text x="88.1161%" y="159.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.28%)</title><rect x="87.8661%" y="133" width="0.2789%" height="15" fill="rgb(206,64,50)" fg:x="630" fg:w="2"/><text x="88.1161%" y="143.50"></text></g><g><title>revme`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="88.0056%" y="117" width="0.1395%" height="15" fill="rgb(234,36,40)" fg:x="631" fg:w="1"/><text x="88.2556%" y="127.50"></text></g><g><title>revme`revm_interpreter::instructions::host::sstore (9 samples, 1.26%)</title><rect x="87.0293%" y="197" width="1.2552%" height="15" fill="rgb(213,64,8)" fg:x="624" fg:w="9"/><text x="87.2793%" y="207.50"></text></g><g><title>revme`&lt;revm::context::Context&lt;EXT,DB&gt; as revm_interpreter::host::Host&gt;::sstore (9 samples, 1.26%)</title><rect x="87.0293%" y="181" width="1.2552%" height="15" fill="rgb(210,75,36)" fg:x="624" fg:w="9"/><text x="87.2793%" y="191.50"></text></g><g><title>revme`revm::journaled_state::ReadWriteSet::add_write (1 samples, 0.14%)</title><rect x="88.1450%" y="165" width="0.1395%" height="15" fill="rgb(229,88,21)" fg:x="632" fg:w="1"/><text x="88.3950%" y="175.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="88.1450%" y="149" width="0.1395%" height="15" fill="rgb(252,204,47)" fg:x="632" fg:w="1"/><text x="88.3950%" y="159.50"></text></g><g><title>revme`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="88.1450%" y="133" width="0.1395%" height="15" fill="rgb(208,77,27)" fg:x="632" fg:w="1"/><text x="88.3950%" y="143.50"></text></g><g><title>revme`revm_interpreter::instructions::memory::mstore (2 samples, 0.28%)</title><rect x="88.2845%" y="197" width="0.2789%" height="15" fill="rgb(221,76,26)" fg:x="633" fg:w="2"/><text x="88.5345%" y="207.50"></text></g><g><title>revme`revm_interpreter::interpreter::Interpreter::run (44 samples, 6.14%)</title><rect x="84.2399%" y="213" width="6.1367%" height="15" fill="rgb(225,139,18)" fg:x="604" fg:w="44"/><text x="84.4899%" y="223.50">revme`re..</text></g><g><title>revme`revm_interpreter::instructions::system::keccak256 (13 samples, 1.81%)</title><rect x="88.5635%" y="197" width="1.8131%" height="15" fill="rgb(230,137,11)" fg:x="635" fg:w="13"/><text x="88.8135%" y="207.50">r..</text></g><g><title>revme`tiny_keccak::keccakf::keccakf (12 samples, 1.67%)</title><rect x="88.7029%" y="181" width="1.6736%" height="15" fill="rgb(212,28,1)" fg:x="636" fg:w="12"/><text x="88.9529%" y="191.50"></text></g><g><title>revme`revm_interpreter::interpreter::contract::Contract::new (1 samples, 0.14%)</title><rect x="90.3766%" y="213" width="0.1395%" height="15" fill="rgb(248,164,17)" fg:x="648" fg:w="1"/><text x="90.6266%" y="223.50"></text></g><g><title>revme`core::ops::function::Fn::call (157 samples, 21.90%)</title><rect x="68.7587%" y="229" width="21.8968%" height="15" fill="rgb(222,171,42)" fg:x="493" fg:w="157"/><text x="69.0087%" y="239.50">revme`core::ops::function::Fn::call</text></g><g><title>revme`ruint::algorithms::mul::addmul (1 samples, 0.14%)</title><rect x="90.5160%" y="213" width="0.1395%" height="15" fill="rgb(243,84,45)" fg:x="649" fg:w="1"/><text x="90.7660%" y="223.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;crossbeam_utils::thread::Scope&gt; (1 samples, 0.14%)</title><rect x="90.6555%" y="229" width="0.1395%" height="15" fill="rgb(252,49,23)" fg:x="650" fg:w="1"/><text x="90.9055%" y="239.50"></text></g><g><title>revme`&lt;crossbeam_utils::sync::wait_group::WaitGroup as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="90.6555%" y="213" width="0.1395%" height="15" fill="rgb(215,19,7)" fg:x="650" fg:w="1"/><text x="90.9055%" y="223.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::context::Context&lt;(),revm_primitives::db::WrapDatabaseRef&lt;&amp;&amp;mut revm::db::states::state::State&lt;revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt;&gt;&gt; (2 samples, 0.28%)</title><rect x="90.7950%" y="229" width="0.2789%" height="15" fill="rgb(238,81,41)" fg:x="651" fg:w="2"/><text x="91.0450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.28%)</title><rect x="90.7950%" y="213" width="0.2789%" height="15" fill="rgb(210,199,37)" fg:x="651" fg:w="2"/><text x="91.0450%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="90.9344%" y="197" width="0.1395%" height="15" fill="rgb(244,192,49)" fg:x="652" fg:w="1"/><text x="91.1844%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="90.9344%" y="181" width="0.1395%" height="15" fill="rgb(226,211,11)" fg:x="652" fg:w="1"/><text x="91.1844%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="91.0739%" y="197" width="0.1395%" height="15" fill="rgb(236,162,54)" fg:x="653" fg:w="1"/><text x="91.3239%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::handler::handle_types::post_execution::PostExecutionHandler&lt;(),revm::db::in_memory_db::BenchmarkDB&gt;&gt; (2 samples, 0.28%)</title><rect x="91.0739%" y="213" width="0.2789%" height="15" fill="rgb(220,229,9)" fg:x="653" fg:w="2"/><text x="91.3239%" y="223.50"></text></g><g><title>revme`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="91.2134%" y="197" width="0.1395%" height="15" fill="rgb(250,87,22)" fg:x="654" fg:w="1"/><text x="91.4634%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="91.3529%" y="197" width="0.1395%" height="15" fill="rgb(239,43,17)" fg:x="655" fg:w="1"/><text x="91.6029%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (4 samples, 0.56%)</title><rect x="91.0739%" y="229" width="0.5579%" height="15" fill="rgb(231,177,25)" fg:x="653" fg:w="4"/><text x="91.3239%" y="239.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::handler::handle_types::pre_execution::PreExecutionHandler&lt;(),revm::db::in_memory_db::BenchmarkDB&gt;&gt; (2 samples, 0.28%)</title><rect x="91.3529%" y="213" width="0.2789%" height="15" fill="rgb(219,179,1)" fg:x="655" fg:w="2"/><text x="91.6029%" y="223.50"></text></g><g><title>revme`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="91.4923%" y="197" width="0.1395%" height="15" fill="rgb(238,219,53)" fg:x="656" fg:w="1"/><text x="91.7423%" y="207.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::handler::handle_types::execution::ExecutionHandler&lt;(),revm::db::in_memory_db::BenchmarkDB&gt;&gt; (3 samples, 0.42%)</title><rect x="91.6318%" y="229" width="0.4184%" height="15" fill="rgb(232,167,36)" fg:x="657" fg:w="3"/><text x="91.8818%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.42%)</title><rect x="91.6318%" y="213" width="0.4184%" height="15" fill="rgb(244,19,51)" fg:x="657" fg:w="3"/><text x="91.8818%" y="223.50"></text></g><g><title>libcorecrypto.dylib`cc_disable_dit (2 samples, 0.28%)</title><rect x="92.1897%" y="181" width="0.2789%" height="15" fill="rgb(224,6,22)" fg:x="661" fg:w="2"/><text x="92.4397%" y="191.50"></text></g><g><title>libcorecrypto.dylib`ccrng (5 samples, 0.70%)</title><rect x="92.1897%" y="197" width="0.6974%" height="15" fill="rgb(224,145,5)" fg:x="661" fg:w="5"/><text x="92.4397%" y="207.50"></text></g><g><title>libcorecrypto.dylib`ccrng_prng (3 samples, 0.42%)</title><rect x="92.4686%" y="181" width="0.4184%" height="15" fill="rgb(234,130,49)" fg:x="663" fg:w="3"/><text x="92.7186%" y="191.50"></text></g><g><title>libcorecrypto.dylib`ccrng_schedule_read (2 samples, 0.28%)</title><rect x="92.8870%" y="165" width="0.2789%" height="15" fill="rgb(254,6,2)" fg:x="666" fg:w="2"/><text x="93.1370%" y="175.50"></text></g><g><title>libcorecrypto.dylib`ccrng_schedule_tree_read (2 samples, 0.28%)</title><rect x="92.8870%" y="149" width="0.2789%" height="15" fill="rgb(208,96,46)" fg:x="666" fg:w="2"/><text x="93.1370%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccrng_schedule_timer_read (2 samples, 0.28%)</title><rect x="92.8870%" y="133" width="0.2789%" height="15" fill="rgb(239,3,39)" fg:x="666" fg:w="2"/><text x="93.1370%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.28%)</title><rect x="92.8870%" y="117" width="0.2789%" height="15" fill="rgb(233,210,1)" fg:x="666" fg:w="2"/><text x="93.1370%" y="127.50"></text></g><g><title>libsystem_c.dylib`_mach_boottime_usec (2 samples, 0.28%)</title><rect x="92.8870%" y="101" width="0.2789%" height="15" fill="rgb(244,137,37)" fg:x="666" fg:w="2"/><text x="93.1370%" y="111.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (2 samples, 0.28%)</title><rect x="92.8870%" y="85" width="0.2789%" height="15" fill="rgb(240,136,2)" fg:x="666" fg:w="2"/><text x="93.1370%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (2 samples, 0.28%)</title><rect x="92.8870%" y="69" width="0.2789%" height="15" fill="rgb(239,18,37)" fg:x="666" fg:w="2"/><text x="93.1370%" y="79.50"></text></g><g><title>libcorecrypto.dylib`cc_disable_dit (1 samples, 0.14%)</title><rect x="93.1660%" y="149" width="0.1395%" height="15" fill="rgb(218,185,22)" fg:x="668" fg:w="1"/><text x="93.4160%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccctr_update (2 samples, 0.28%)</title><rect x="93.3054%" y="149" width="0.2789%" height="15" fill="rgb(225,218,4)" fg:x="669" fg:w="2"/><text x="93.5554%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_ctr_crypt (1 samples, 0.14%)</title><rect x="93.5844%" y="133" width="0.1395%" height="15" fill="rgb(230,182,32)" fg:x="671" fg:w="1"/><text x="93.8344%" y="143.50"></text></g><g><title>libcorecrypto.dylib`update_with_ctr (2 samples, 0.28%)</title><rect x="93.5844%" y="149" width="0.2789%" height="15" fill="rgb(242,56,43)" fg:x="671" fg:w="2"/><text x="93.8344%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccctr_update (1 samples, 0.14%)</title><rect x="93.7238%" y="133" width="0.1395%" height="15" fill="rgb(233,99,24)" fg:x="672" fg:w="1"/><text x="93.9738%" y="143.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_ctr_crypt (1 samples, 0.14%)</title><rect x="93.7238%" y="117" width="0.1395%" height="15" fill="rgb(234,209,42)" fg:x="672" fg:w="1"/><text x="93.9738%" y="127.50"></text></g><g><title>libcorecrypto.dylib`generate (6 samples, 0.84%)</title><rect x="93.1660%" y="165" width="0.8368%" height="15" fill="rgb(227,7,12)" fg:x="668" fg:w="6"/><text x="93.4160%" y="175.50"></text></g><g><title>libsystem_c.dylib`memset_s (1 samples, 0.14%)</title><rect x="93.8633%" y="149" width="0.1395%" height="15" fill="rgb(245,203,43)" fg:x="673" fg:w="1"/><text x="94.1133%" y="159.50"></text></g><g><title>libcommonCrypto.dylib`CCRandomGenerateBytes (14 samples, 1.95%)</title><rect x="92.1897%" y="213" width="1.9526%" height="15" fill="rgb(238,205,33)" fg:x="661" fg:w="14"/><text x="92.4397%" y="223.50">l..</text></g><g><title>libcorecrypto.dylib`generate (9 samples, 1.26%)</title><rect x="92.8870%" y="197" width="1.2552%" height="15" fill="rgb(231,56,7)" fg:x="666" fg:w="9"/><text x="93.1370%" y="207.50"></text></g><g><title>libcorecrypto.dylib`ccrng_crypto_generate (9 samples, 1.26%)</title><rect x="92.8870%" y="181" width="1.2552%" height="15" fill="rgb(244,186,29)" fg:x="666" fg:w="9"/><text x="93.1370%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (1 samples, 0.14%)</title><rect x="94.0028%" y="165" width="0.1395%" height="15" fill="rgb(234,111,31)" fg:x="674" fg:w="1"/><text x="94.2528%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="94.1423%" y="197" width="0.1395%" height="15" fill="rgb(241,149,10)" fg:x="675" fg:w="1"/><text x="94.3923%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.14%)</title><rect x="94.2817%" y="181" width="0.1395%" height="15" fill="rgb(249,206,44)" fg:x="676" fg:w="1"/><text x="94.5317%" y="191.50"></text></g><g><title>revme`revm::evm::Evm&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;::builder (18 samples, 2.51%)</title><rect x="92.0502%" y="229" width="2.5105%" height="15" fill="rgb(251,153,30)" fg:x="660" fg:w="18"/><text x="92.3002%" y="239.50">re..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.42%)</title><rect x="94.1423%" y="213" width="0.4184%" height="15" fill="rgb(239,152,38)" fg:x="675" fg:w="3"/><text x="94.3923%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.28%)</title><rect x="94.2817%" y="197" width="0.2789%" height="15" fill="rgb(249,139,47)" fg:x="676" fg:w="2"/><text x="94.5317%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="94.4212%" y="181" width="0.1395%" height="15" fill="rgb(244,64,35)" fg:x="677" fg:w="1"/><text x="94.6712%" y="191.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="94.5607%" y="213" width="0.1395%" height="15" fill="rgb(216,46,15)" fg:x="678" fg:w="1"/><text x="94.8107%" y="223.50"></text></g><g><title>revme`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="94.7001%" y="197" width="0.1395%" height="15" fill="rgb(250,74,19)" fg:x="679" fg:w="1"/><text x="94.9501%" y="207.50"></text></g><g><title>revme`core::hash::BuildHasher::hash_one (1 samples, 0.14%)</title><rect x="94.7001%" y="181" width="0.1395%" height="15" fill="rgb(249,42,33)" fg:x="679" fg:w="1"/><text x="94.9501%" y="191.50"></text></g><g><title>revme`revm::handler::mainnet::post_execution::reimburse_caller (3 samples, 0.42%)</title><rect x="94.5607%" y="229" width="0.4184%" height="15" fill="rgb(242,149,17)" fg:x="678" fg:w="3"/><text x="94.8107%" y="239.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_account (2 samples, 0.28%)</title><rect x="94.7001%" y="213" width="0.2789%" height="15" fill="rgb(244,29,21)" fg:x="679" fg:w="2"/><text x="94.9501%" y="223.50"></text></g><g><title>revme`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.14%)</title><rect x="94.8396%" y="197" width="0.1395%" height="15" fill="rgb(220,130,37)" fg:x="680" fg:w="1"/><text x="95.0896%" y="207.50"></text></g><g><title>revme`revm::handler::mainnet::post_execution::reward_beneficiary (1 samples, 0.14%)</title><rect x="94.9791%" y="229" width="0.1395%" height="15" fill="rgb(211,67,2)" fg:x="681" fg:w="1"/><text x="95.2291%" y="239.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::load_account (1 samples, 0.14%)</title><rect x="94.9791%" y="213" width="0.1395%" height="15" fill="rgb(235,68,52)" fg:x="681" fg:w="1"/><text x="95.2291%" y="223.50"></text></g><g><title>revme`revm::journaled_state::JournaledState::clear (1 samples, 0.14%)</title><rect x="95.1185%" y="229" width="0.1395%" height="15" fill="rgb(246,142,3)" fg:x="682" fg:w="1"/><text x="95.3685%" y="239.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::journaled_state::JournaledState&gt; (1 samples, 0.14%)</title><rect x="95.1185%" y="213" width="0.1395%" height="15" fill="rgb(241,25,7)" fg:x="682" fg:w="1"/><text x="95.3685%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="95.1185%" y="197" width="0.1395%" height="15" fill="rgb(242,119,39)" fg:x="682" fg:w="1"/><text x="95.3685%" y="207.50"></text></g><g><title>revme`revm_interpreter::interpreter::Interpreter::run (1 samples, 0.14%)</title><rect x="95.2580%" y="229" width="0.1395%" height="15" fill="rgb(241,98,45)" fg:x="683" fg:w="1"/><text x="95.5080%" y="239.50"></text></g><g><title>revme`revm_primitives::env::Env::validate_tx (1 samples, 0.14%)</title><rect x="95.3975%" y="229" width="0.1395%" height="15" fill="rgb(254,28,30)" fg:x="684" fg:w="1"/><text x="95.6475%" y="239.50"></text></g><g><title>revme`core::ops::function::FnOnce::call_once{{vtable.shim}} (277 samples, 38.63%)</title><rect x="57.0432%" y="245" width="38.6332%" height="15" fill="rgb(241,142,54)" fg:x="409" fg:w="277"/><text x="57.2932%" y="255.50">revme`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>revme`std::sys::sync::once_box::OnceBox&lt;T&gt;::initialize (1 samples, 0.14%)</title><rect x="95.5370%" y="229" width="0.1395%" height="15" fill="rgb(222,85,15)" fg:x="685" fg:w="1"/><text x="95.7870%" y="239.50"></text></g><g><title>revme`DYLD-STUB$$pthread_mutex_init (1 samples, 0.14%)</title><rect x="95.5370%" y="213" width="0.1395%" height="15" fill="rgb(210,85,47)" fg:x="685" fg:w="1"/><text x="95.7870%" y="223.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;revm::frame::Frame&gt;&gt; (1 samples, 0.14%)</title><rect x="95.6764%" y="245" width="0.1395%" height="15" fill="rgb(224,206,25)" fg:x="686" fg:w="1"/><text x="95.9264%" y="255.50"></text></g><g><title>revme`core::ptr::drop_in_place&lt;revm::handler::Handler&lt;revm::context::Context&lt;(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;,(),revm::db::emptydb::EmptyDBTyped&lt;core::convert::Infallible&gt;&gt;&gt; (1 samples, 0.14%)</title><rect x="95.8159%" y="245" width="0.1395%" height="15" fill="rgb(243,201,19)" fg:x="687" fg:w="1"/><text x="96.0659%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="95.9554%" y="197" width="0.1395%" height="15" fill="rgb(236,59,4)" fg:x="688" fg:w="1"/><text x="96.2054%" y="207.50"></text></g><g><title>revme`core::ops::function::FnOnce::call_once{{vtable.shim}} (300 samples, 41.84%)</title><rect x="54.3933%" y="277" width="41.8410%" height="15" fill="rgb(254,179,45)" fg:x="390" fg:w="300"/><text x="54.6433%" y="287.50">revme`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>revme`std::sys::backtrace::__rust_begin_short_backtrace (299 samples, 41.70%)</title><rect x="54.5328%" y="261" width="41.7015%" height="15" fill="rgb(226,14,10)" fg:x="391" fg:w="299"/><text x="54.7828%" y="271.50">revme`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>revme`std::thread::spawnhook::ChildSpawnHooks::run (2 samples, 0.28%)</title><rect x="95.9554%" y="245" width="0.2789%" height="15" fill="rgb(244,27,41)" fg:x="688" fg:w="2"/><text x="96.2054%" y="255.50"></text></g><g><title>revme`std::sys::thread_local::destructors::list::register (2 samples, 0.28%)</title><rect x="95.9554%" y="229" width="0.2789%" height="15" fill="rgb(235,35,32)" fg:x="688" fg:w="2"/><text x="96.2054%" y="239.50"></text></g><g><title>revme`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.28%)</title><rect x="95.9554%" y="213" width="0.2789%" height="15" fill="rgb(218,68,31)" fg:x="688" fg:w="2"/><text x="96.2054%" y="223.50"></text></g><g><title>revme`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="96.0948%" y="197" width="0.1395%" height="15" fill="rgb(207,120,37)" fg:x="689" fg:w="1"/><text x="96.3448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="96.5132%" y="213" width="0.1395%" height="15" fill="rgb(227,98,0)" fg:x="692" fg:w="1"/><text x="96.7632%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.14%)</title><rect x="96.6527%" y="197" width="0.1395%" height="15" fill="rgb(207,7,3)" fg:x="693" fg:w="1"/><text x="96.9027%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.70%)</title><rect x="96.3738%" y="261" width="0.6974%" height="15" fill="rgb(206,98,19)" fg:x="691" fg:w="5"/><text x="96.6238%" y="271.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (5 samples, 0.70%)</title><rect x="96.3738%" y="245" width="0.6974%" height="15" fill="rgb(217,5,26)" fg:x="691" fg:w="5"/><text x="96.6238%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.56%)</title><rect x="96.5132%" y="229" width="0.5579%" height="15" fill="rgb(235,190,38)" fg:x="692" fg:w="4"/><text x="96.7632%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.42%)</title><rect x="96.6527%" y="213" width="0.4184%" height="15" fill="rgb(247,86,24)" fg:x="693" fg:w="3"/><text x="96.9027%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.28%)</title><rect x="96.7922%" y="197" width="0.2789%" height="15" fill="rgb(205,101,16)" fg:x="694" fg:w="2"/><text x="97.0422%" y="207.50"></text></g><g><title>all (717 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="717"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (459 samples, 64.02%)</title><rect x="35.9833%" y="325" width="64.0167%" height="15" fill="rgb(231,114,1)" fg:x="258" fg:w="459"/><text x="36.2333%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (413 samples, 57.60%)</title><rect x="42.3989%" y="309" width="57.6011%" height="15" fill="rgb(207,184,53)" fg:x="304" fg:w="413"/><text x="42.6489%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>revme`std::sys::pal::unix::thread::Thread::new::thread_start (345 samples, 48.12%)</title><rect x="51.8828%" y="293" width="48.1172%" height="15" fill="rgb(224,95,51)" fg:x="372" fg:w="345"/><text x="52.1328%" y="303.50">revme`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>revme`std::sys::pal::unix::stack_overflow::imp::make_handler (27 samples, 3.77%)</title><rect x="96.2343%" y="277" width="3.7657%" height="15" fill="rgb(212,188,45)" fg:x="690" fg:w="27"/><text x="96.4843%" y="287.50">revm..</text></g><g><title>libsystem_kernel.dylib`__mmap (21 samples, 2.93%)</title><rect x="97.0711%" y="261" width="2.9289%" height="15" fill="rgb(223,154,38)" fg:x="696" fg:w="21"/><text x="97.3211%" y="271.50">li..</text></g></svg></svg>